package com.harine.virgotest.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.harine.virgotest.data.bean.AreaItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AREA_ITEM".
*/
public class AreaItemDao extends AbstractDao<AreaItem, Long> {

    public static final String TABLENAME = "AREA_ITEM";

    /**
     * Properties of entity AreaItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ItemId = new Property(0, Long.class, "itemId", true, "_id");
        public final static Property PId = new Property(1, String.class, "pId", false, "P_ID");
        public final static Property AreaId = new Property(2, String.class, "areaId", false, "AREA_ID");
        public final static Property AreaType = new Property(3, String.class, "areaType", false, "AREA_TYPE");
        public final static Property AreaIndex = new Property(4, String.class, "areaIndex", false, "AREA_INDEX");
        public final static Property AreaLeft = new Property(5, float.class, "areaLeft", false, "AREA_LEFT");
        public final static Property AreaTop = new Property(6, float.class, "areaTop", false, "AREA_TOP");
        public final static Property AreaWidth = new Property(7, float.class, "areaWidth", false, "AREA_WIDTH");
        public final static Property AreaHeigh = new Property(8, float.class, "areaHeigh", false, "AREA_HEIGH");
    }


    public AreaItemDao(DaoConfig config) {
        super(config);
    }
    
    public AreaItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AREA_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: itemId
                "\"P_ID\" TEXT," + // 1: pId
                "\"AREA_ID\" TEXT UNIQUE ," + // 2: areaId
                "\"AREA_TYPE\" TEXT," + // 3: areaType
                "\"AREA_INDEX\" TEXT," + // 4: areaIndex
                "\"AREA_LEFT\" REAL NOT NULL ," + // 5: areaLeft
                "\"AREA_TOP\" REAL NOT NULL ," + // 6: areaTop
                "\"AREA_WIDTH\" REAL NOT NULL ," + // 7: areaWidth
                "\"AREA_HEIGH\" REAL NOT NULL );"); // 8: areaHeigh
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AREA_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AreaItem entity) {
        stmt.clearBindings();
 
        Long itemId = entity.getItemId();
        if (itemId != null) {
            stmt.bindLong(1, itemId);
        }
 
        String pId = entity.getPId();
        if (pId != null) {
            stmt.bindString(2, pId);
        }
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(3, areaId);
        }
 
        String areaType = entity.getAreaType();
        if (areaType != null) {
            stmt.bindString(4, areaType);
        }
 
        String areaIndex = entity.getAreaIndex();
        if (areaIndex != null) {
            stmt.bindString(5, areaIndex);
        }
        stmt.bindDouble(6, entity.getAreaLeft());
        stmt.bindDouble(7, entity.getAreaTop());
        stmt.bindDouble(8, entity.getAreaWidth());
        stmt.bindDouble(9, entity.getAreaHeigh());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AreaItem entity) {
        stmt.clearBindings();
 
        Long itemId = entity.getItemId();
        if (itemId != null) {
            stmt.bindLong(1, itemId);
        }
 
        String pId = entity.getPId();
        if (pId != null) {
            stmt.bindString(2, pId);
        }
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(3, areaId);
        }
 
        String areaType = entity.getAreaType();
        if (areaType != null) {
            stmt.bindString(4, areaType);
        }
 
        String areaIndex = entity.getAreaIndex();
        if (areaIndex != null) {
            stmt.bindString(5, areaIndex);
        }
        stmt.bindDouble(6, entity.getAreaLeft());
        stmt.bindDouble(7, entity.getAreaTop());
        stmt.bindDouble(8, entity.getAreaWidth());
        stmt.bindDouble(9, entity.getAreaHeigh());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AreaItem readEntity(Cursor cursor, int offset) {
        AreaItem entity = new AreaItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // itemId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // areaId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // areaType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // areaIndex
            cursor.getFloat(offset + 5), // areaLeft
            cursor.getFloat(offset + 6), // areaTop
            cursor.getFloat(offset + 7), // areaWidth
            cursor.getFloat(offset + 8) // areaHeigh
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AreaItem entity, int offset) {
        entity.setItemId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAreaId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAreaType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAreaIndex(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAreaLeft(cursor.getFloat(offset + 5));
        entity.setAreaTop(cursor.getFloat(offset + 6));
        entity.setAreaWidth(cursor.getFloat(offset + 7));
        entity.setAreaHeigh(cursor.getFloat(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AreaItem entity, long rowId) {
        entity.setItemId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AreaItem entity) {
        if(entity != null) {
            return entity.getItemId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AreaItem entity) {
        return entity.getItemId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.harine.virgotest.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.harine.virgotest.data.bean.PlayLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAY_LOG".
*/
public class PlayLogDao extends AbstractDao<PlayLog, Long> {

    public static final String TABLENAME = "PLAY_LOG";

    /**
     * Properties of entity PlayLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PId = new Property(1, String.class, "pId", false, "P_ID");
        public final static Property ResId = new Property(2, String.class, "resId", false, "RES_ID");
        public final static Property AreaId = new Property(3, String.class, "areaId", false, "AREA_ID");
        public final static Property Today = new Property(4, java.util.Date.class, "today", false, "TODAY");
        public final static Property PlayTimes = new Property(5, int.class, "playTimes", false, "PLAY_TIMES");
        public final static Property IsProgram = new Property(6, boolean.class, "isProgram", false, "IS_PROGRAM");
    }


    public PlayLogDao(DaoConfig config) {
        super(config);
    }
    
    public PlayLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAY_LOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"P_ID\" TEXT," + // 1: pId
                "\"RES_ID\" TEXT," + // 2: resId
                "\"AREA_ID\" TEXT," + // 3: areaId
                "\"TODAY\" INTEGER," + // 4: today
                "\"PLAY_TIMES\" INTEGER NOT NULL ," + // 5: playTimes
                "\"IS_PROGRAM\" INTEGER NOT NULL );"); // 6: isProgram
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAY_LOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlayLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pId = entity.getPId();
        if (pId != null) {
            stmt.bindString(2, pId);
        }
 
        String resId = entity.getResId();
        if (resId != null) {
            stmt.bindString(3, resId);
        }
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(4, areaId);
        }
 
        java.util.Date today = entity.getToday();
        if (today != null) {
            stmt.bindLong(5, today.getTime());
        }
        stmt.bindLong(6, entity.getPlayTimes());
        stmt.bindLong(7, entity.getIsProgram() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlayLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pId = entity.getPId();
        if (pId != null) {
            stmt.bindString(2, pId);
        }
 
        String resId = entity.getResId();
        if (resId != null) {
            stmt.bindString(3, resId);
        }
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(4, areaId);
        }
 
        java.util.Date today = entity.getToday();
        if (today != null) {
            stmt.bindLong(5, today.getTime());
        }
        stmt.bindLong(6, entity.getPlayTimes());
        stmt.bindLong(7, entity.getIsProgram() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PlayLog readEntity(Cursor cursor, int offset) {
        PlayLog entity = new PlayLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // resId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // areaId
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // today
            cursor.getInt(offset + 5), // playTimes
            cursor.getShort(offset + 6) != 0 // isProgram
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlayLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setResId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAreaId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setToday(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setPlayTimes(cursor.getInt(offset + 5));
        entity.setIsProgram(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlayLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlayLog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PlayLog entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.harine.virgotest.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.harine.virgotest.data.bean.Program;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROGRAM".
*/
public class ProgramDao extends AbstractDao<Program, Long> {

    public static final String TABLENAME = "PROGRAM";

    /**
     * Properties of entity Program.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PId = new Property(1, String.class, "pId", false, "P_ID");
        public final static Property StartDate = new Property(2, java.util.Date.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(3, java.util.Date.class, "endDate", false, "END_DATE");
        public final static Property StartTime = new Property(4, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(5, String.class, "endTime", false, "END_TIME");
        public final static Property ProgramStartLat = new Property(6, Double.class, "programStartLat", false, "PROGRAM_START_LAT");
        public final static Property ProgramStartLng = new Property(7, Double.class, "programStartLng", false, "PROGRAM_START_LNG");
        public final static Property ProgramEndLat = new Property(8, Double.class, "programEndLat", false, "PROGRAM_END_LAT");
        public final static Property ProgramEndLng = new Property(9, Double.class, "programEndLng", false, "PROGRAM_END_LNG");
        public final static Property PType = new Property(10, int.class, "pType", false, "P_TYPE");
        public final static Property PTimes = new Property(11, int.class, "pTimes", false, "P_TIMES");
        public final static Property Screen = new Property(12, int.class, "screen", false, "SCREEN");
    }


    public ProgramDao(DaoConfig config) {
        super(config);
    }
    
    public ProgramDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROGRAM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"P_ID\" TEXT UNIQUE ," + // 1: pId
                "\"START_DATE\" INTEGER," + // 2: startDate
                "\"END_DATE\" INTEGER," + // 3: endDate
                "\"START_TIME\" TEXT," + // 4: startTime
                "\"END_TIME\" TEXT," + // 5: endTime
                "\"PROGRAM_START_LAT\" REAL," + // 6: programStartLat
                "\"PROGRAM_START_LNG\" REAL," + // 7: programStartLng
                "\"PROGRAM_END_LAT\" REAL," + // 8: programEndLat
                "\"PROGRAM_END_LNG\" REAL," + // 9: programEndLng
                "\"P_TYPE\" INTEGER NOT NULL ," + // 10: pType
                "\"P_TIMES\" INTEGER NOT NULL ," + // 11: pTimes
                "\"SCREEN\" INTEGER NOT NULL );"); // 12: screen
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROGRAM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Program entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pId = entity.getPId();
        if (pId != null) {
            stmt.bindString(2, pId);
        }
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(3, startDate.getTime());
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(4, endDate.getTime());
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(5, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(6, endTime);
        }
 
        Double programStartLat = entity.getProgramStartLat();
        if (programStartLat != null) {
            stmt.bindDouble(7, programStartLat);
        }
 
        Double programStartLng = entity.getProgramStartLng();
        if (programStartLng != null) {
            stmt.bindDouble(8, programStartLng);
        }
 
        Double programEndLat = entity.getProgramEndLat();
        if (programEndLat != null) {
            stmt.bindDouble(9, programEndLat);
        }
 
        Double programEndLng = entity.getProgramEndLng();
        if (programEndLng != null) {
            stmt.bindDouble(10, programEndLng);
        }
        stmt.bindLong(11, entity.getPType());
        stmt.bindLong(12, entity.getPTimes());
        stmt.bindLong(13, entity.getScreen());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Program entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pId = entity.getPId();
        if (pId != null) {
            stmt.bindString(2, pId);
        }
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(3, startDate.getTime());
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(4, endDate.getTime());
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(5, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(6, endTime);
        }
 
        Double programStartLat = entity.getProgramStartLat();
        if (programStartLat != null) {
            stmt.bindDouble(7, programStartLat);
        }
 
        Double programStartLng = entity.getProgramStartLng();
        if (programStartLng != null) {
            stmt.bindDouble(8, programStartLng);
        }
 
        Double programEndLat = entity.getProgramEndLat();
        if (programEndLat != null) {
            stmt.bindDouble(9, programEndLat);
        }
 
        Double programEndLng = entity.getProgramEndLng();
        if (programEndLng != null) {
            stmt.bindDouble(10, programEndLng);
        }
        stmt.bindLong(11, entity.getPType());
        stmt.bindLong(12, entity.getPTimes());
        stmt.bindLong(13, entity.getScreen());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Program readEntity(Cursor cursor, int offset) {
        Program entity = new Program( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pId
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // startDate
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // endDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // startTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // endTime
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // programStartLat
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // programStartLng
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // programEndLat
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // programEndLng
            cursor.getInt(offset + 10), // pType
            cursor.getInt(offset + 11), // pTimes
            cursor.getInt(offset + 12) // screen
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Program entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setEndDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setStartTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEndTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProgramStartLat(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setProgramStartLng(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setProgramEndLat(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setProgramEndLng(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setPType(cursor.getInt(offset + 10));
        entity.setPTimes(cursor.getInt(offset + 11));
        entity.setScreen(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Program entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Program entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Program entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

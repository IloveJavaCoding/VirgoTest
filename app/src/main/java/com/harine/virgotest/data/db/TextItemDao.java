package com.harine.virgotest.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.harine.virgotest.data.bean.TextItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEXT_ITEM".
*/
public class TextItemDao extends AbstractDao<TextItem, Long> {

    public static final String TABLENAME = "TEXT_ITEM";

    /**
     * Properties of entity TextItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PId = new Property(1, String.class, "pId", false, "P_ID");
        public final static Property ResId = new Property(2, String.class, "resId", false, "RES_ID");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property StartTime = new Property(4, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(5, String.class, "endTime", false, "END_TIME");
        public final static Property Duration = new Property(6, int.class, "duration", false, "DURATION");
    }


    public TextItemDao(DaoConfig config) {
        super(config);
    }
    
    public TextItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEXT_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"P_ID\" TEXT," + // 1: pId
                "\"RES_ID\" TEXT," + // 2: resId
                "\"CONTENT\" TEXT," + // 3: content
                "\"START_TIME\" TEXT," + // 4: startTime
                "\"END_TIME\" TEXT," + // 5: endTime
                "\"DURATION\" INTEGER NOT NULL );"); // 6: duration
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEXT_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TextItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pId = entity.getPId();
        if (pId != null) {
            stmt.bindString(2, pId);
        }
 
        String resId = entity.getResId();
        if (resId != null) {
            stmt.bindString(3, resId);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(5, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(6, endTime);
        }
        stmt.bindLong(7, entity.getDuration());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TextItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pId = entity.getPId();
        if (pId != null) {
            stmt.bindString(2, pId);
        }
 
        String resId = entity.getResId();
        if (resId != null) {
            stmt.bindString(3, resId);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(5, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(6, endTime);
        }
        stmt.bindLong(7, entity.getDuration());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TextItem readEntity(Cursor cursor, int offset) {
        TextItem entity = new TextItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // resId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // startTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // endTime
            cursor.getInt(offset + 6) // duration
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TextItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setResId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStartTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEndTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDuration(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TextItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TextItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TextItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
